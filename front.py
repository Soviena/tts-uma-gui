# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'front.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import out
import soundfile as sf
from pathlib import Path
import json
import math
import torch
from torch import nn
from torch.nn import functional as F
from torch.utils.data import DataLoader
import numpy as np
import commons
import utils
from data_utils import TextAudioLoader, TextAudioCollate, TextAudioSpeakerLoader, TextAudioSpeakerCollate
from models import SynthesizerTrn
from text.symbols import symbols
from text import text_to_sequence

umas = [
    "Special Week",
    "Silence Suzuka",
    "Tokai Teio",
    "Maruzensky",
    "Fuji Kiseki",
    "Oguri Cap",
    "Gold Ship",
    "Vodka",
    "Daiwa Scarlet",
    "Taiki Shuttle",
    "Grass Wonder",
    "Hishi Amazon",
    "Mejiro McQueen",
    "El Condor Pasa",
    "TM Opera O",
    "Narita Brian",
    "Symboli Rudolf",
    "Air Groove",
    "Agnes Digital",
    "Seiun Sky",
    "Tamamo Cross",
    "Fine Motion",
    "Biwa Hayahide",
    "Mayano Top Gun",
    "Manhattan Cafe",
    "Mihono Bourbon",
    "Mejiro Ryan",
    "Hishi Akebono",
    "Yukino Bijin",
    "Rice Shower",
    "Ines Fujin",
    "Agnes Tachyon",
    "Admire Vega",
    "Inari One",
    "Winning Ticket",
    "Air Shakur",
    "Eishin Flash",
    "Curren Chan",
    "Kawakami Princess",
    "Gold City",
    "Sakura Bakushin O",
    "Seeking the Pearl",
    "Shinko Windy",
    "Sweep Tosho",
    "Super Creek",
    "Smart Falcon",
    "Zenno Rob Roy",
    "Tosen Jordan",
    "Nakayama Festa",
    "Narita Taishin",
    "Nishino Flower",
    "Haru Urara",
    "Bamboo Memory",
    "Biko Pegasus",
    "Marvelous Sunday",
    "Matikanefukukitaru",
    "Mr. C.B.",
    "Meisho doto",
    "Mejiro Dober",
    "Nice Nature",
    "King Halo",
    "Machikane Tannhauser",
    "Ikuno Dictus",
    "Mejiro Palmer",
    "Daitaku Helios",
    "Twin Turbo",
    "Satono Diamond",
    "Kitasan Black",
    "Sakura Chiyono O",
    "Sirius Symboli",
    "Mejiro Ardan",
    "Yaeno Muteki",
    "Tsurumaru Tsuyoshi",
    "Mejiro Bright",
    "Sakura Laurel",
    "Narita Top Road",
    "Yamanin Zephyr",
    "Daiichi Ruby",
    "Aston Machan",
    "K.S. Miracle",
    "Copano Rickey",
    "Hokko Tarumae",
    "Wonder Acute",
    "Montjeu",
    "Hayakawa Tazuna",
    "Akikawa Yayoi(President)",
    "Otonasi Etuko",
    "Kiryuin Aoi",
    "Anshinzawa Sasami",
    "Kashimoto Rico",
    "Light Hello"
]



class Ui_main(object):
    def setupUi(self, main):
        main.setObjectName("main")
        main.resize(615, 487)
        main.setMinimumSize(QtCore.QSize(615, 487))
        main.setMaximumSize(QtCore.QSize(615, 487))
        main.setWindowTitle("Umamusume TTS")

        self.centralwidget = QtWidgets.QWidget(main)
        self.centralwidget.setObjectName("centralwidget")
        self.combo_uma = QtWidgets.QComboBox(self.centralwidget)
        self.combo_uma.setGeometry(QtCore.QRect(320, 30, 281, 30))
        # add uma
        self.combo_uma.setObjectName("combo_uma")
        self.combo_uma.addItems(umas)

        self.lbl_uma = QtWidgets.QLabel(self.centralwidget)
        self.lbl_uma.setGeometry(QtCore.QRect(40, 40, 121, 17))
        self.lbl_uma.setText("Uma Musume")
        self.lbl_uma.setObjectName("lbl_uma")
        self.txt_jap = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.txt_jap.setGeometry(QtCore.QRect(40, 80, 561, 131))
        self.txt_jap.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.txt_jap.setPlaceholderText("Input some japanese text")
        self.txt_jap.setObjectName("txt_jap")

        self.slider_a = QtWidgets.QSlider(self.centralwidget)
        self.slider_a.setGeometry(QtCore.QRect(260, 240, 211, 18))
        self.slider_a.setMinimum(10)
        self.slider_a.setMaximum(100)
        self.slider_a.setProperty("value", 70)
        self.slider_a.setOrientation(QtCore.Qt.Horizontal)
        self.slider_a.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.slider_a.setTickInterval(10)
        self.slider_a.setObjectName("slider_a")
        self.slider_a_width = QtWidgets.QSlider(self.centralwidget)
        self.slider_a_width.setGeometry(QtCore.QRect(260, 280, 211, 18))
        self.slider_a_width.setMinimum(10)
        self.slider_a_width.setMaximum(100)
        self.slider_a_width.setProperty("value", 30)
        self.slider_a_width.setOrientation(QtCore.Qt.Horizontal)
        self.slider_a_width.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.slider_a_width.setTickInterval(10)
        self.slider_a_width.setObjectName("slider_a_width")
        self.slider_length_scale = QtWidgets.QSlider(self.centralwidget)
        self.slider_length_scale.setGeometry(QtCore.QRect(260, 320, 211, 18))
        self.slider_length_scale.setMinimum(10)
        self.slider_length_scale.setMaximum(500)
        self.slider_length_scale.setSingleStep(1)
        self.slider_length_scale.setPageStep(1)
        self.slider_length_scale.setProperty("value", 100)
        self.slider_length_scale.setOrientation(QtCore.Qt.Horizontal)
        self.slider_length_scale.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.slider_length_scale.setTickInterval(10)
        self.slider_length_scale.setObjectName("slider_length_scale")

        self.lbl_a = QtWidgets.QLabel(self.centralwidget)
        self.lbl_a.setGeometry(QtCore.QRect(40, 240, 121, 17))
        self.lbl_a.setText("Accent Pitch")
        self.lbl_a.setObjectName("lbl_a")
        self.lbl_a_w = QtWidgets.QLabel(self.centralwidget)
        self.lbl_a_w.setGeometry(QtCore.QRect(40, 280, 141, 17))
        self.lbl_a_w.setText("Accent Pithc (Width)")
        self.lbl_a_w.setObjectName("lbl_a_w")
        self.lbl_length_scale = QtWidgets.QLabel(self.centralwidget)
        self.lbl_length_scale.setGeometry(QtCore.QRect(40, 320, 121, 17))
        self.lbl_length_scale.setText("Length Scale")
        self.lbl_length_scale.setObjectName("lbl_length_scale")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(309, 400, 261, 30))
        self.pushButton.setText("Generate TTS")
        self.pushButton.setObjectName("pushButton")
        self.spin_a = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.spin_a.setGeometry(QtCore.QRect(490, 230, 111, 30))
        self.spin_a.setSpecialValueText("")
        self.spin_a.setPrefix("")
        self.spin_a.setSuffix("")
        self.spin_a.setMinimum(0.1)
        self.spin_a.setMaximum(1.0)
        self.spin_a.setSingleStep(0.01)
        self.spin_a.setProperty("value", 0.7)
        self.spin_a.setObjectName("spin_a")
        self.spin_a_w = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.spin_a_w.setGeometry(QtCore.QRect(490, 270, 111, 30))
        self.spin_a_w.setSpecialValueText("")
        self.spin_a_w.setPrefix("")
        self.spin_a_w.setSuffix("")
        self.spin_a_w.setMinimum(0.1)
        self.spin_a_w.setMaximum(1.0)
        self.spin_a_w.setSingleStep(0.01)
        self.spin_a_w.setProperty("value", 0.3)
        self.spin_a_w.setObjectName("spin_a_w")
        self.spin_length_scale = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.spin_length_scale.setGeometry(QtCore.QRect(490, 310, 111, 30))
        self.spin_length_scale.setSpecialValueText("")
        self.spin_length_scale.setPrefix("")
        self.spin_length_scale.setSuffix("")
        self.spin_length_scale.setMinimum(0.1)
        self.spin_length_scale.setMaximum(5.0)
        self.spin_length_scale.setSingleStep(0.1)
        self.spin_length_scale.setProperty("value", 1.0)
        self.spin_length_scale.setObjectName("spin_length_scale")

        main.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(main)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 615, 27))
        self.menubar.setObjectName("menubar")
        main.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(main)
        self.statusbar.setObjectName("statusbar")
        main.setStatusBar(self.statusbar)

        self.slider_a.valueChanged.connect(lambda: self.slider_changed_value(self.slider_a, self.spin_a))
        self.slider_a_width.valueChanged.connect(lambda: self.slider_changed_value(self.slider_a_width, self.spin_a_w))
        self.slider_length_scale.valueChanged.connect(lambda: self.slider_changed_value(self.slider_length_scale, self.spin_length_scale))

        self.spin_a.valueChanged.connect(lambda: self.spinbox_changed_value(self.spin_a, self.slider_a))
        self.spin_a_w.valueChanged.connect(lambda: self.spinbox_changed_value(self.spin_a_w, self.slider_a_width))
        self.spin_length_scale.valueChanged.connect(lambda: self.spinbox_changed_value(self.spin_length_scale, self.slider_length_scale))

        self.pushButton.clicked.connect(lambda: self.generate_tts())

        self.initVits()

  
        QtCore.QMetaObject.connectSlotsByName(main)

    def get_text(self, text, hps):
        text_norm = text_to_sequence(text, hps.data.text_cleaners)
        if hps.data.add_blank:
            text_norm = commons.intersperse(text_norm, 0)
        text_norm = torch.LongTensor(text_norm)
        return text_norm

    def initVits(self):
        self.hps = utils.get_hparams_from_file("./configs/uma.json")
        self.net_g = SynthesizerTrn(
            len(symbols),
            self.hps.data.filter_length // 2 + 1,
            self.hps.train.segment_size // self.hps.data.hop_length,
            n_speakers=self.hps.data.n_speakers,
            **self.hps.model).cuda()
        self._ = self.net_g.eval()
        self._ = utils.load_checkpoint("G_790000.pth", self.net_g, None)

    def spinbox_changed_value(self, spinbox, slider):
        slider.setValue(int(spinbox.value()*100))


    def slider_changed_value(self,slider, spinbox):
        spinbox.setValue(slider.value()/100)
    
    def generate_tts(self):
        uma_id = self.combo_uma.currentIndex()
        length_scale = self.spin_length_scale.value()
        noise_scale_w = self.spin_a_w.value()
        noise_scale = self.spin_a.value()
        japanese_text = self.txt_jap.toPlainText() 
        stn_tst = self.get_text(japanese_text, self.hps)
        with torch.no_grad():
            x_tst = stn_tst.cuda().unsqueeze(0)
            x_tst_lengths = torch.LongTensor([stn_tst.size(0)]).cuda()
            sid = torch.LongTensor([uma_id]).cuda()
            audio = self.net_g.infer(x_tst, x_tst_lengths, sid=sid, noise_scale=.677, noise_scale_w=0.3, length_scale=1.2)[0][0,0].data.cpu().float().numpy() 
        sf.write('out_audio/output.wav', audio, self.hps.data.sampling_rate)
        self.outputWindow = QtWidgets.QWidget()
        ui = out.Ui_Form()
        ui.setupUi(self.outputWindow)
        self.outputWindow.show()
